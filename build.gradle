plugins {
  id "io.freefair.lombok" version "4.1.4"
  id 'com.github.johnrengelman.shadow' version '5.2.0'
  id "org.jetbrains.kotlin.jvm" version "1.3.60"
  id "com.bmuschko.docker-java-application" version "5.3.0"
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.11
targetCompatibility = 1.11

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "11"
  }
}

/*
================================================================================
unit tests
================================================================================
*/

test {
  useJUnitPlatform()
}

/*
================================================================================
integration tests
================================================================================
*/

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    kotlin {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/kotlin')
    }
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom implementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
  group = "verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  outputs.upToDateWhen { false }
}

/*
================================================================================
dependencies
================================================================================
*/

def versions = [
    activation: "1.2.0",
    freemarker: "2.3.29",
    hamcrest: "2.2",
    junit: "5.5.2",
    kotlin: "1.3.60",
    logback: "1.2.3",
    slf4j: "1.7.26"
]

dependencies {
  // web server
  implementation("com.sun.activation:javax.activation:${versions.activation}")
  implementation("org.freemarker:freemarker:${versions.freemarker}")
  implementation("org.slf4j:slf4j-api:${versions.slf4j}")
  runtimeOnly("ch.qos.logback:logback-classic:${versions.logback}")

  // unit tests
  testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  testImplementation("org.hamcrest:hamcrest:${versions.hamcrest}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")

  // integration tests
  integrationTestImplementation("org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}")
  integrationTestImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  integrationTestImplementation("org.hamcrest:hamcrest:${versions.hamcrest}")
  integrationTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
}

/*
================================================================================
artifact
================================================================================
*/

def mainClass = "org.giogt.web.server.Application"

application {
  mainClassName = "${mainClass}"
}

jar {
  manifest {
    attributes(
        'Main-Class': "${mainClass}"
    )
  }

  from {
    configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

/*
================================================================================
docker
================================================================================
*/

// copy artifacts under docker directory
task copyJar(type: Copy) {
  from shadowJar
  into 'docker/web-server/app'
}
build.dependsOn copyJar

// ensure copied artifacts are cleaned, when running the clean task
clean {
  delete "docker/web-server/app"
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildDockerImage(type: DockerBuildImage) {
  dependsOn build

  inputDir = file('docker/web-server')
  tags.add("giogt/web-server:latest")
}
